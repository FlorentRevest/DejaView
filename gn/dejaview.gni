# Copyright (C) 2017 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("wasm_vars.gni")

# Summary of our typical build configurations:

# 1. Standalone builds
#    is_dejaview_build_generator = false
#    dejaview_build_standalone = true

# 2. Android tree builds
#    is_dejaview_build_generator = true
#    dejaview_build_standalone = false

# 3. Chromium tree builds
#    is_dejaview_build_generator = false
#    dejaview_build_standalone = false

# 4. Builds in other embedder trees (e.g. V8 standalone)
#    is_dejaview_build_generator = false
#    dejaview_build_standalone = false

# 5. Amalgamated sources (Client library)
#    is_dejaview_build_generator = true
#    dejaview_build_standalone = false

# +----------------------------------------------------------------------------+
# | Toolchain / environment related configuration                              |
# +----------------------------------------------------------------------------+
# This section contains a bunch of variables that are related with the toolchain
# and the build environment. Only tools/gen_xxx should customize them.

if (!defined(is_nacl)) {
  is_nacl = false
}

if (!defined(is_gcc)) {
  is_gcc = !is_clang && !is_win
}

declare_args() {
  # All the tools/gen_* scripts set this to true. This is mainly used to locate
  # .gni files from //gn rather than //build.
  is_dejaview_build_generator = false
}

dejaview_build_standalone = true

# Only relevant for GN builds. Sets the path where dejaview lives. This is //
# for standalone builds and //third_party/dejaview/ in embedders. The embedder
# can override it in its GN files.
if (dejaview_build_standalone || is_dejaview_build_generator) {
  dejaview_root_path = "//"
  import("//gn/standalone/android.gni")  # For android_api_level
  import("//gn/standalone/sanitizers/vars.gni")  # For is_fuzzer
} else if (!defined(dejaview_root_path)) {
  dejaview_root_path = "//third_party/dejaview/"
  import("//build/config/android/config.gni")  # For android_api_level
}

# Whether the ftrace producer and the service should be started
# by the integration test or assumed to be running.
# If we're building in the Android tree, we expect that the testing infra
# will start the binaries in the system image before the tests are run.
# In all other cases (i.e. when true), a temporary in-process instance will be
# brought up by our own integrationtest harness.
start_daemons_for_testing = true

# +----------------------------------------------------------------------------+
# | Tunable build variables for embedders                                      |
# +----------------------------------------------------------------------------+
# The variables in this section allow embedders to enable/disable features
# at the build-system level. This allows to opt-in into the various services
# and tools.

dejaview_force_dlog_default = ""

declare_args() {
  # Allow the embedder to use the IPC layer. In turn this allows to use the
  # system backend in the client library.
  # This includes building things that rely on POSIX sockets, this places
  # limitations on the supported operating systems.
  # For now the IPC layer is conservatively not enabled on Chromium+Windows
  # builds.
  enable_dejaview_ipc =
      !is_nacl && (dejaview_build_standalone || is_fuchsia)

  # The Trace Processor: offline analytical engine to process traces and compute
  # metrics using a SQL engine.
  if (!defined(enable_dejaview_trace_processor)) {
    enable_dejaview_trace_processor =
        dejaview_build_standalone || is_dejaview_build_generator
  }

  # Enables base::Watchdog. Is supported only on Linux-based platforms in
  # standalone GN builds (NOT in bazel/blaze).
  # gn/BUILD.gn further restricts this to OS_LINUX || OS_ANDROID when generating
  # the dejaview_build_flags.h header.
  enable_dejaview_watchdog =
      (dejaview_build_standalone && !is_dejaview_build_generator)

  # Misc host executable under tools/.
  enable_dejaview_tools =
      dejaview_build_standalone

  enable_dejaview_unittests = dejaview_build_standalone

  enable_dejaview_integration_tests =
      dejaview_build_standalone

  enable_dejaview_benchmarks = dejaview_build_standalone && !is_win

  enable_dejaview_fuzzers =
      dejaview_build_standalone && defined(is_fuzzer) && is_fuzzer

  # Enables the write_version_header.py tool that generates a .h that contains a
  # macro with the current git revision and latest release version from
  # CHANGELOG. If false base/version.h will return "unknown".
  enable_dejaview_version_gen =
      dejaview_build_standalone || is_dejaview_build_generator

  # Only for local development. When true the binaries (dejaview, traced, ...)
  # are monolithic and don't use a common shared library. This is mainly to
  # avoid LD_LIBRARY_PATH dances when testing locally.
  # On Windows we default to monolithic executables, because pairing
  # dllexport/import adds extra complexity for little benefit. Te only reason
  # for monolithic_binaries=false is saving binary size, which matters mainly on
  # Android. See also comments on DEJAVIEW_EXPORT_ENTRYPOINT in compiler.h.
  monolithic_binaries = (is_win || is_mac)

  # Whether DLOG should be enabled on debug builds (""), all builds ("on"), or
  # none ("off"). We disable it by default for embedders to avoid spamming their
  # console.
  dejaview_force_dlog = dejaview_force_dlog_default

  # Whether DCHECKs should be enabled or not. Values: "on" | "off" | "".
  # By default ("") DCHECKs are enabled only:
  # - If DCHECK_ALWAYS_ON is defined (which is mainly a Chromium-ism).
  # - On debug builds (i.e. if NDEBUG is NOT defined) but only in Chromium,
  #   Android and standalone builds.
  # - On all other builds (e.g., SDK) it's off regardless of NDEBUG (unless
  #   DCHECK_ALWAYS_ON is defined).
  # See base/logging.h for the implementation of all this.
  dejaview_force_dcheck = ""

  # Installs a signal handler for the most common crash signals which unwinds
  # the stack and prints the stack trace on stderr. Requires a dependency on
  # libbacktrace when enabled.
  enable_dejaview_stderr_crash_dump =
      is_debug && dejaview_build_standalone && !is_wasm && !is_win

  # Enables more aggressive compiler flags that assume recent Intel CPUs.
  # Runtime checks during initialization will print an error message and exit
  # if the CPU doesn't support those flags.
  # Don't enable by default for MacOS. Old Intel Macs as used in CIs
  # etc don't have the fancy CPU instructions (i.e. AVX2) this implies.
  enable_dejaview_x64_cpu_opt =
      current_cpu == "x64" && is_linux && !is_wasm &&
      dejaview_build_standalone && !is_dejaview_build_generator
}

declare_args() {
  # When false, it disables system backend consumer support in the DejaView SDK.
  # Saves ~300KB binary size.
  if (!defined(enable_dejaview_system_consumer)) {
    enable_dejaview_system_consumer = enable_dejaview_ipc
  }
}

declare_args() {
  dejaview_enable_git_rev_version_header =
      enable_dejaview_version_gen && dejaview_build_standalone &&
      !is_dejaview_build_generator

  # Whether info-level logging is enabled.
  dejaview_verbose_logs_enabled = true

  # Enables the SQL query layer of trace processor.
  enable_dejaview_trace_processor_sqlite = enable_dejaview_trace_processor

  # Enables the optional SQLite percentile module.
  enable_dejaview_trace_processor_percentile =
      enable_dejaview_trace_processor &&
      (dejaview_build_standalone)

  # Enables the REPL interactive prompt in the trace processor.
  enable_dejaview_trace_processor_linenoise =
      dejaview_build_standalone && enable_dejaview_trace_processor &&
      (is_linux || is_mac)

  # Enables httpd RPC support in the trace processor.
  # Further per-OS conditionals are applied in gn/BUILD.gn.
  # Chromium+Win: httpd support depends on enable_dejaview_ipc, which is not
  # enabled on Chromium+Win for now (see a comment there).
  enable_dejaview_trace_processor_httpd =
      enable_dejaview_trace_processor &&
      (dejaview_build_standalone)

  # Enables Zlib support. This is used to compress traces (by the tracing
  # service and by the "dejaview" cmdline client) and to decompress traces (by
  # trace_processor).
  enable_dejaview_zlib = enable_dejaview_trace_processor

  # Enables function name demangling using sources from llvm. Otherwise
  # trace_processor falls back onto using the c++ runtime demangler, which
  # typically handles only itanium mangling.
  # llvm-demangle is incompatible with GCC and can be used only when building
  # with clang.
  enable_dejaview_llvm_demangle =
      is_clang && enable_dejaview_trace_processor && dejaview_build_standalone
}

declare_args() {
  # Allows to build the UI (TypeScript/ HTML / WASM)
  enable_dejaview_ui =
      dejaview_build_standalone && enable_dejaview_trace_processor_sqlite &&
      host_os != "win"

  # Allows to build the perfetto.dev website.
  # WARNING: if this flag is enabled, the build performs globbing at generation
  # time. Incremental builds that add/remove files will not be supported without
  # rerunning gn.
  enable_dejaview_site = false

  # Check that the merged dejaview_trace.proto can be translated to a C++ lite
  # proto and compiled. This is disabled by default because it's expensive (it
  # can take a couple of minutes).
  enable_dejaview_merged_protos_check = false

  # Skip buildtools dependency checks (needed for ChromeOS).
  skip_buildtools_check = false

  # Used by CrOS builds. Uses pkg-config to determine the appropriate flags
  # for including and linking system libraries.
  #   set `host_pkg_config` to the `BUILD_PKG_CONFIG` and
  #   set `pkg_config` to the target `PKG_CONFIG`.
  # Note: that if this is enabled `dejaview_use_system_protobuf` should be also.
  dejaview_use_pkgconfig = false

  # Used by CrOS system builds. Uses the system version of protobuf
  # from /usr/include instead of the hermetic one.
  dejaview_use_system_protobuf = false

  # Used by CrOS system builds. Uses the system version of sqlite
  # from /usr/include instead of the hermetic one.
  dejaview_use_system_sqlite = false

  dejaview_use_system_zlib = false
}

if (is_win) {
  # clang-cl
  dejaview_isystem_cflag = "/I"
} else {
  dejaview_isystem_cflag = "-isystem"
}

# +---------------------------------------------------------------------------+
# | Cross-checks                                                              |
# +---------------------------------------------------------------------------+

assert(dejaview_force_dlog == "" || dejaview_force_dlog == "on" ||
       dejaview_force_dlog == "off")

# |dejaview_use_pkgconfig| changes the behavior of
# |dejaview_use_system_protobuf|, so if dejaview_use_pkgconfig is set,
# |dejaview_use_system_protobuf| must be set.
assert(!dejaview_use_pkgconfig || dejaview_use_system_protobuf,
       "dejaview_use_pkgconfig requires dejaview_use_system_protobuf")
