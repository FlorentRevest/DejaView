# Copyright (C) 2017 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("gn/dejaview.gni")
import("gn/test.gni")

# +----------------------------------------------------------------------------+
# | "all" targets definition: defines targets reachable by the various configs |
# +----------------------------------------------------------------------------+
# There is a subtletly here related with chromium and other GN embedders.
# When adding a dependency some_dir/:target_name, some_dir/BUILD.gn is
# "discovered". As a side effect any *other* target defined in some_dir/BUILD.gn
# (and its transitive dependencies) becomes implicitly part of the "default"
# target, the one invoked running ninja -C out/xxx without further args.
# Because of this, care must be taken to wrap dependencies to targets in other
# build files with if (enable_xxx) flags. Accidentally including a harmless
# target that happens to be defined in the same BUILD.gn that contains targets
# incompatible with the chromium build will cause build/roll failures.

all_targets = [ "protos/dejaview/trace:dejaview_trace_protos" ]

if (enable_dejaview_trace_processor && enable_dejaview_trace_processor_sqlite) {
  all_targets += [ "src/trace_processor:trace_processor_shell" ]
}

if (enable_dejaview_trace_processor) {
  all_targets += [ "src/trace_redaction:trace_redactor" ]
}

if (enable_dejaview_tools) {
  all_targets += [ "src/tools" ]
}

if (enable_dejaview_unittests) {
  import("gn/dejaview_unittests.gni")
  test("dejaview_unittests") {
    if (is_fuchsia) {
      additional_manifest_fragments =
          [ "//build/config/fuchsia/test/network.shard.test-cml" ]  # nogncheck
    }
    deps = dejaview_unittests_targets
  }
  all_targets += [ ":dejaview_unittests" ]
}

if (enable_dejaview_integration_tests) {
  import("gn/dejaview_integrationtests.gni")
  test("dejaview_integrationtests") {
    deps = [
      "gn:default_deps",
      "test:integrationtest_main",
    ]
    deps += dejaview_integrationtests_targets
  }
  all_targets += [
    ":dejaview_integrationtests",
  ]
}

if (enable_dejaview_benchmarks) {
  import("gn/dejaview_benchmarks.gni")
  executable("dejaview_benchmarks") {
    testonly = true
    deps = dejaview_benchmarks_targets
  }
  all_targets += [ ":dejaview_benchmarks" ]
}

if (enable_dejaview_fuzzers) {
  import("gn/dejaview_fuzzers.gni")
  group("fuzzers") {
    testonly = true
    deps = dejaview_fuzzers_targets
  }
  all_targets += [ ":fuzzers" ]
}

# Less interesting stuff that makes sense only in the standalone build, mainly
# compile-time checks for the CI.
if (dejaview_build_standalone) {
  all_targets += [
    # For checking all generated xxx.gen.{cc,h} files without waiting for
    # embedders to try to use them and fail.
    "protos/dejaview/config:cpp",
    "protos/dejaview/common:cpp",

    # Checks that the "fake" backend implementations build.
    "src/tracing:client_api_no_backends_compile_test",
  ]
}

if (enable_dejaview_merged_protos_check) {
  # For syntax-checking the protos.
  all_targets += [ "protos/dejaview/trace:merged_trace_lite" ]
}

group("all") {
  testonly = true  # allow to build also test targets
  deps = all_targets
}

# This target is used when running ninja without any argument (by default would
# build all reachable targets). This is mainly used to prevent the UI being
# built when running ninja -C out/xxx.
# This has effect only in standalone builds, no effect on chromium builds.
# Chromium's "all" target depends on our "all" target above. However chromium's
# "default" target depends on any target that we cause to be discovered by
# depending on other GN files.
group("default") {
  testonly = true
  deps = [ ":all" ]
}

# Client library target exposed to the Android tree.
# Still in experimental stage and not API stable yet.
# See "libdejaview_client_example" (in Android.bp.extras) for an example
# on how to use the DejaView Client API from the android tree.
static_library("libdejaview_client_experimental") {
  complete_static_lib = true
  public_deps = [
    "gn:default_deps",
    "src/tracing:client_api",
    "src/tracing:platform_impl",
  ]
  sources = [ "include/dejaview/tracing.h" ]
  assert_no_deps = [ "gn:protobuf_lite" ]
}
