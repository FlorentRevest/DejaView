# Copyright (C) 2018 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("../../gn/fuzzer.gni")
import("../../gn/dejaview.gni")
import("../../gn/dejaview_cc_proto_descriptor.gni")
import("../../gn/dejaview_host_executable.gni")
import("../../gn/test.gni")
import("../../gn/wasm.gni")

# Prevent that this file is accidentally included in embedder builds.
assert(enable_dejaview_trace_processor)

# The library which eases processing of DejaView traces by exposing reading
# friendly APIs.
if (enable_dejaview_trace_processor_sqlite) {
  static_library("trace_processor") {
    complete_static_lib = true
    public_deps = [ ":lib" ]
  }
}

if (enable_dejaview_ui) {
  wasm_lib("trace_processor_wasm") {
    name = "trace_processor"
    deps = [
      ":lib",
      "../../gn:default_deps",
      "../base",
      "rpc:wasm_bridge",
    ]
  }
}

source_set("metatrace") {
  sources = [
    "tp_metatrace.cc",
    "tp_metatrace.h",
  ]
  deps = [
    "../../gn:default_deps",
    "../../include/dejaview/ext/base",
    "../../include/dejaview/trace_processor",
    "../../protos/dejaview/trace_processor:zero",
  ]
}

# In Bazel builds the ":demangle" target (below) should be a static_library so
# it gets mapped to an actual target (rather than being squashed as a filegroup)
# and can be replaced in Google internal builds via dejaview_cfg.bzl.
# Unfortunately, however, static_library targets seem to break Wasm builds on
# Mac. For this reason we just make it a source_set for all other build types.
if (is_dejaview_build_generator) {
  _demangle_target_type = "static_library"
} else {
  _demangle_target_type = "source_set"
}

target(_demangle_target_type, "demangle") {
  sources = [ "demangle.cc" ]
  deps = [
    "../../gn:default_deps",
    "../../include/dejaview/base",
    "../../include/dejaview/ext/base",
  ]
  public_deps = [ "../../include/dejaview/ext/trace_processor:demangle" ]
  if (enable_dejaview_llvm_demangle) {
    deps += [ "../../gn:llvm_demangle" ]
  }
}

source_set("storage_minimal") {
  sources = [
    "forwarding_trace_parser.cc",
    "forwarding_trace_parser.h",
    "trace_blob.cc",
    "trace_processor_context.cc",
    "trace_processor_storage.cc",
    "trace_processor_storage_impl.cc",
    "trace_processor_storage_impl.h",
    "trace_reader_registry.cc",
    "trace_reader_registry.h",
    "virtual_destructors.cc",
  ]
  deps = [
    "../../gn:default_deps",
    "../base",
    "../protozero",
    "containers",
    "importers/common",
    "importers/common:parser_types",
    "importers/memory_tracker:graph_processor",
    "importers/proto:gen_cc_track_event_descriptor",
    "importers/proto:minimal",
    "sorter",
    "storage",
    "tables",
    "types",
    "util:descriptors",
    "util:gzip",
    "util:proto_to_args_parser",
    "util:trace_type",
  ]
  public_deps = [ "../../include/dejaview/trace_processor:storage" ]
}

if (enable_dejaview_trace_processor_sqlite) {
  source_set("lib") {
    sources = [
      "iterator_impl.cc",
      "iterator_impl.h",
      "read_trace.cc",
      "read_trace_internal.cc",
      "read_trace_internal.h",
      "trace_processor.cc",
      "trace_processor_impl.cc",
      "trace_processor_impl.h",
    ]
    deps = [
      ":metatrace",
      ":storage_minimal",
      "../../gn:default_deps",
      "../../protos/dejaview/common:zero",
      "../../protos/dejaview/trace:zero",
      "../../protos/dejaview/trace/dejaview:zero",
      "../../protos/dejaview/trace_processor:zero",
      "../base",
      "../protozero",
      "db",
      "importers/common",
      "importers/gzip:full",
      "importers/proto:full",
      "importers/proto:minimal",
      "importers/zip:full",
      "metrics",
      "dejaview_sql/engine",
      "dejaview_sql/intrinsics/functions",
      "dejaview_sql/intrinsics/operators",
      "dejaview_sql/intrinsics/table_functions",
      "dejaview_sql/stdlib",
      "sqlite",
      "storage",
      "tables",
      "types",
      "util",
      "util:gzip",
      "util:protozero_to_json",
      "util:protozero_to_text",
      "util:regex",
      "util:stdlib",
      "util:trace_type",
    ]
    public_deps = [
      "../../gn:sqlite",  # iterator_impl.h includes sqlite3.h.
      "../../include/dejaview/trace_processor",
    ]
  }

  executable("trace_processor_shell") {
    deps = [
      ":lib",
      "../../gn:default_deps",
      "../../gn:protobuf_full",
      "../../protos/dejaview/trace_processor:zero",
      "../../src/profiling:deobfuscator",
      "../../src/profiling/symbolizer",
      "../../src/profiling/symbolizer:symbolize_database",
      "../base",
      "../base:version",
      "metrics",
      "rpc:stdiod",
      "sqlite",
      "util",
      "util:stdlib",
    ]
    if (enable_dejaview_trace_processor_linenoise) {
      deps += [ "../../gn:linenoise" ]
    }
    if (enable_dejaview_trace_processor_httpd) {
      deps += [ "rpc:httpd" ]
    }
    sources = [ "trace_processor_shell.cc" ]
    if ((dejaview_build_standalone) && !is_dejaview_build_generator) {
      data_deps = [
        # The diff testing framework depends on these descriptors.
        "../../protos/dejaview/metrics:descriptor",
        "../../protos/dejaview/trace:descriptor",
        "../../protos/dejaview/trace:test_extensions_descriptor",
        "../../protos/dejaview/trace_processor:stack_descriptor",
      ]
    }
  }

  # Shell target which does not link all the extra libraryes linked by
  # trace processor shell (e.g. httpd, libprotobuf etc.). Use for binary size
  # analysis of the trace processor library.
  executable("trace_processor_minimal_shell") {
    deps = [
      ":lib",
      "../../gn:default_deps",
      "util",
    ]
    sources = [ "minimal_shell.cc" ]
  }
}  # if (enable_dejaview_trace_processor_sqlite)

dejaview_unittest_source_set("top_level_unittests") {
  testonly = true

  sources = [
    "forwarding_trace_parser_unittest.cc",
    "ref_counted_unittest.cc",
    "trace_blob_unittest.cc",
  ]
  deps = [
    ":storage_minimal",
    "../../gn:default_deps",
    "../../gn:gtest_and_gmock",
    "../../include/dejaview/trace_processor",
    "util:trace_type",
  ]
}

dejaview_unittest_source_set("unittests") {
  testonly = true

  # Do not add sources to this target: use top_level_unittests
  # instead. This us really just a grouping
  deps = [
    ":top_level_unittests",
    "containers:unittests",
    "db:unittests",
    "db/column:unittests",
    "importers/common:unittests",
    "importers/memory_tracker:unittests",
    "importers/proto:unittests",
    "rpc:unittests",
    "sorter:unittests",
    "tables:unittests",
    "util:unittests",
  ]
  if (enable_dejaview_trace_processor_sqlite) {
    deps += [
      "dejaview_sql/engine:unittests",
      "dejaview_sql/intrinsics/functions:unittests",
      "dejaview_sql/intrinsics/operators:unittests",
      "dejaview_sql/intrinsics/table_functions:unittests",
      "dejaview_sql/parser:unittests",
      "dejaview_sql/preprocessor:unittests",
      "dejaview_sql/tokenizer:unittests",
      "sqlite:unittests",
    ]
  }
}

dejaview_cc_proto_descriptor("gen_cc_test_messages_descriptor") {
  descriptor_name = "test_messages.descriptor"
  descriptor_target = "../protozero:test_messages_descriptor"
}

source_set("integrationtests") {
  testonly = true
  sources = []
  deps = []
  if (enable_dejaview_trace_processor_sqlite) {
    sources += [
      "read_trace_integrationtest.cc",
      "trace_database_integrationtest.cc",
    ]
    deps += [
      ":lib",
      "../../gn:default_deps",
      "../../gn:gtest_and_gmock",
      "../../protos/dejaview/common:zero",
      "../../protos/dejaview/trace:zero",
      "../../protos/dejaview/trace_processor:zero",
      "../base",
      "../base:test_support",
      "sqlite",
    ]
  }
}

dejaview_fuzzer_test("trace_processor_fuzzer") {
  testonly = true
  sources = [ "trace_parsing_fuzzer.cc" ]
  deps = [
    ":storage_minimal",
    "../../gn:default_deps",
    "../base",
  ]
}
