
#include "src/trace_processor/dejaview_sql/grammar/dejaviewsql_keywordhash_helper.h"
/***** This file contains automatically generated code ******
**
** The code in this file has been automatically generated by
**
**   sqlite/tool/mkkeywordhash.c
**
** The code in this file implements a function that determines whether
** or not a given identifier is really an SQL keyword.  The same thing
** might be implemented more directly using a hand-written hash table.
** But by using this automatically generated code, the size of the code
** is substantially reduced.  This is important for embedded applications
** on platforms with limited memory.
*/
/* Hash score: 244 */
/* zKWText[] encodes 1054 bytes of keyword text in 699 bytes */
/*   REINDEXEDESCAPEACHECKEYBEFOREIGNOREGEXPLAINCLUDEFERRABLEFTABLE     */
/*   LSELECTHENDATABASEXCLUDELETEMPORARYISNULLSAVEPOINTERSECTIES        */
/*   NOTNULLIKEXCEPTRANSACTIONATURALTERAISEXCLUSIVEXISTSCONSTRAINTO     */
/*   FFSETRIGGERANGENERATEDETACHAVINGLOBEGINSTEADDEFAULTMACROSS         */
/*   UNIQUERYWITHOUTEREFERENCESATTACHBETWEENOTHINGROUPSCASCADE          */
/*   FERREDEJAVIEWHENCASECOLLATECREATECURRENT_DATEIMMEDIATEJOINNER      */
/*   ELEASEMATCHMODULEPLANALYZEPRAGMATERIALIZEDISTINCTUPDATEVALUES      */
/*   VIRTUALWAYSWHERECURSIVEABORTAFTERENAMEANDROPARTITION               */
/*   AUTOINCREMENTCASTCOLUMNCOMMITCONFLICTCURRENT_TIMESTAMPRECEDING     */
/*   FAILASTFILTEREPLACEFIRSTFOLLOWINGFROMFULLIMITFUNCTIONIFINSERT      */
/*   ORDERESTRICTOTHERSOVERETURNINGRETURNSRIGHTROLLBACKROWS             */
/*   UNBOUNDEDUNIONUSINGVACUUMWINDOWBYINITIALLYPRIMARY                  */
static const char zKWText[698] = {
  'R','E','I','N','D','E','X','E','D','E','S','C','A','P','E','A','C','H',
  'E','C','K','E','Y','B','E','F','O','R','E','I','G','N','O','R','E','G',
  'E','X','P','L','A','I','N','C','L','U','D','E','F','E','R','R','A','B',
  'L','E','F','T','A','B','L','E','L','S','E','L','E','C','T','H','E','N',
  'D','A','T','A','B','A','S','E','X','C','L','U','D','E','L','E','T','E',
  'M','P','O','R','A','R','Y','I','S','N','U','L','L','S','A','V','E','P',
  'O','I','N','T','E','R','S','E','C','T','I','E','S','N','O','T','N','U',
  'L','L','I','K','E','X','C','E','P','T','R','A','N','S','A','C','T','I',
  'O','N','A','T','U','R','A','L','T','E','R','A','I','S','E','X','C','L',
  'U','S','I','V','E','X','I','S','T','S','C','O','N','S','T','R','A','I',
  'N','T','O','F','F','S','E','T','R','I','G','G','E','R','A','N','G','E',
  'N','E','R','A','T','E','D','E','T','A','C','H','A','V','I','N','G','L',
  'O','B','E','G','I','N','S','T','E','A','D','D','E','F','A','U','L','T',
  'M','A','C','R','O','S','S','U','N','I','Q','U','E','R','Y','W','I','T',
  'H','O','U','T','E','R','E','F','E','R','E','N','C','E','S','A','T','T',
  'A','C','H','B','E','T','W','E','E','N','O','T','H','I','N','G','R','O',
  'U','P','S','C','A','S','C','A','D','E','F','E','R','R','E','D','E','J',
  'A','V','I','E','W','H','E','N','C','A','S','E','C','O','L','L','A','T',
  'E','C','R','E','A','T','E','C','U','R','R','E','N','T','_','D','A','T',
  'E','I','M','M','E','D','I','A','T','E','J','O','I','N','N','E','R','E',
  'L','E','A','S','E','M','A','T','C','H','M','O','D','U','L','E','P','L',
  'A','N','A','L','Y','Z','E','P','R','A','G','M','A','T','E','R','I','A',
  'L','I','Z','E','D','I','S','T','I','N','C','T','U','P','D','A','T','E',
  'V','A','L','U','E','S','V','I','R','T','U','A','L','W','A','Y','S','W',
  'H','E','R','E','C','U','R','S','I','V','E','A','B','O','R','T','A','F',
  'T','E','R','E','N','A','M','E','A','N','D','R','O','P','A','R','T','I',
  'T','I','O','N','A','U','T','O','I','N','C','R','E','M','E','N','T','C',
  'A','S','T','C','O','L','U','M','N','C','O','M','M','I','T','C','O','N',
  'F','L','I','C','T','C','U','R','R','E','N','T','_','T','I','M','E','S',
  'T','A','M','P','R','E','C','E','D','I','N','G','F','A','I','L','A','S',
  'T','F','I','L','T','E','R','E','P','L','A','C','E','F','I','R','S','T',
  'F','O','L','L','O','W','I','N','G','F','R','O','M','F','U','L','L','I',
  'M','I','T','F','U','N','C','T','I','O','N','I','F','I','N','S','E','R',
  'T','O','R','D','E','R','E','S','T','R','I','C','T','O','T','H','E','R',
  'S','O','V','E','R','E','T','U','R','N','I','N','G','R','E','T','U','R',
  'N','S','R','I','G','H','T','R','O','L','L','B','A','C','K','R','O','W',
  'S','U','N','B','O','U','N','D','E','D','U','N','I','O','N','U','S','I',
  'N','G','V','A','C','U','U','M','W','I','N','D','O','W','B','Y','I','N',
  'I','T','I','A','L','L','Y','P','R','I','M','A','R','Y',
};
/* aKWHash[i] is the hash value for the i-th keyword */
static const unsigned char aKWHash[127] = {
   133,  98, 141,  87, 110,  28,   0,   0, 100,   0,  91,  74,   0,
    52,  34,  93,  61,   0,  41,  82,  53,  96, 142,  20,   0,   0,
   147,   0,  39, 135,  92,  21, 112,   0,   9,   0,   0, 127,  85,
     0,  83,   6,   0,  67, 108, 153,   0, 143, 119,   0,   0,  47,
     0,  79,  16,   0,  23,   0,  26,  72,  22,  25,   5,  59, 148,
   115, 126,   0,  75,  97,  73, 151,  60, 124,  76,   0,  48,   0,
    11,  40,   0,  65,   0,   0,   0, 114,  10, 116, 120, 129,  14,
   131, 128,   0, 105,   0,  24, 125, 150,  55, 136, 146,  95,  88,
    36,  29, 130,   0,   0, 113,  50, 137, 134,   0,  33,   0,   0,
   138,   0, 103,  37,  38,   0,  18,  44, 121,  99,
};
/* aKWNext[] forms the hash collision chain.  If aKWHash[i]==0
** then the i-th keyword has no more hash collisions.  Otherwise,
** the next keyword with the same hash is aKWHash[i]-1. */
static const unsigned char aKWNext[154] = {0,
     0,   0,   0,   0,   4,   0,  42,   0,   0, 111, 118,   0,   0,
     0,   0,   0,   0,   0,   0, 139,  13,   0,   0, 149,   0,  81,
     0,   0, 123,  51,   0,   0, 144,  12,   0,   0,  89,   0, 145,
     0, 140,   0,   0,  35,   0,   0,  27,  63,   0,   0,   0,  15,
    58,   0,  46,   0,   0,   0,   0,   0,   2,   0,   0,   0,   0,
     0,   0,   0,  90,   0,   0,   0,   0,   0, 152,   3,   0,  57,
     0,  66,  56,   0,   1,  77,   0,   0,   0,  30,   0,   0,   0,
     0,   0,   0,   0, 132, 109,   0,  80,  68,  71,   0,   0,   0,
     0,  45,   0,  62,   8,   0,   0,   0,   0,   0,   0,   0,   0,
     0,  86, 106,  64, 117,  17,   7,  69,   0,  84, 102, 122,   0,
    49,   0,   0,  70,   0,   0, 104,  43,   0,   0,  54,   0,  78,
     0, 101,  31,  32,  19,   0, 107,   0,   0,  94,
};
/* aKWLen[i] is the length (in bytes) of the i-th keyword */
static const unsigned char aKWLen[154] = {0,
     7,   7,   5,   4,   6,   4,   5,   3,   6,   7,   3,   6,   6,
     7,   7,  10,   4,   5,   4,   6,   4,   3,   8,   2,   7,   6,
     9,   4,   2,   6,   5,   9,   9,   4,   7,   3,   2,   4,   4,
     6,  11,   6,   2,   7,   5,   5,   9,   6,  10,   4,   6,   2,
     3,   7,   5,   9,   6,   6,   4,   5,   7,   3,   7,   5,   5,
     6,   5,   7,   4,   5,  10,   6,   7,   7,   6,   5,   7,   3,
     8,   8,   4,   4,   4,   7,   6,  12,   9,   4,   5,   7,   5,
     6,   4,   7,   6,  12,   8,   2,   6,   6,   7,   6,   5,   9,
     5,   5,   6,   3,   4,   9,  13,   2,   2,   4,   6,   6,   8,
    17,  12,   7,   9,   4,   4,   6,   7,   5,   9,   4,   4,   5,
     8,   2,   6,   5,   8,   6,   4,   9,   7,   5,   8,   4,   3,
     9,   5,   5,   6,   6,   2,   2,   9,   3,   7,
};
/* aKWOffset[i] is the index into zKWText[] of the start of
** the text for the i-th keyword. */
static const unsigned short int aKWOffset[154] = {0,
     0,   2,   2,   8,   9,  14,  16,  20,  23,  25,  25,  29,  33,
    36,  41,  46,  54,  57,  61,  63,  68,  70,  72,  77,  79,  84,
    88,  88,  92,  97,  99, 103, 109, 117, 121, 121, 121, 124, 127,
   130, 135, 140, 144, 145, 150, 154, 158, 166, 172, 179, 182, 182,
   185, 187, 193, 196, 204, 209, 214, 217, 220, 225, 227, 234, 236,
   241, 244, 249, 249, 253, 257, 267, 273, 279, 285, 285, 291, 292,
   296, 303, 307, 310, 314, 318, 325, 331, 343, 352, 354, 358, 365,
   370, 376, 378, 385, 389, 400, 401, 408, 414, 420, 425, 431, 434,
   443, 448, 452, 458, 460, 463, 472, 474, 476, 485, 489, 495, 501,
   509, 509, 509, 525, 534, 537, 541, 546, 553, 558, 567, 571, 574,
   579, 587, 589, 595, 599, 607, 613, 616, 625, 632, 637, 645, 645,
   649, 658, 663, 668, 674, 677, 680, 682, 687, 691,
};
/* aKWCode[i] is the parser symbol code for the i-th keyword */
static const unsigned char aKWCode[154] = {0,
  TK_REINDEX,    TK_INDEXED,    TK_INDEX,      TK_DESC,       TK_ESCAPE,     
  TK_EACH,       TK_CHECK,      TK_KEY,        TK_BEFORE,     TK_FOREIGN,    
  TK_FOR,        TK_IGNORE,     TK_LIKE_KW,    TK_EXPLAIN,    TK_INCLUDE,    
  TK_DEFERRABLE, TK_JOIN_KW,    TK_TABLE,      TK_ELSE,       TK_SELECT,     
  TK_THEN,       TK_END,        TK_DATABASE,   TK_AS,         TK_EXCLUDE,    
  TK_DELETE,     TK_TEMP,       TK_TEMP,       TK_OR,         TK_ISNULL,     
  TK_NULLS,      TK_SAVEPOINT,  TK_INTERSECT,  TK_TIES,       TK_NOTNULL,    
  TK_NOT,        TK_NO,         TK_NULL,       TK_LIKE_KW,    TK_EXCEPT,     
  TK_TRANSACTION,TK_ACTION,     TK_ON,         TK_JOIN_KW,    TK_ALTER,      
  TK_RAISE,      TK_EXCLUSIVE,  TK_EXISTS,     TK_CONSTRAINT, TK_INTO,       
  TK_OFFSET,     TK_OF,         TK_SET,        TK_TRIGGER,    TK_RANGE,      
  TK_GENERATED,  TK_DETACH,     TK_HAVING,     TK_LIKE_KW,    TK_BEGIN,      
  TK_INSTEAD,    TK_ADD,        TK_DEFAULT,    TK_MACRO,      TK_JOIN_KW,    
  TK_UNIQUE,     TK_QUERY,      TK_WITHOUT,    TK_WITH,       TK_JOIN_KW,    
  TK_REFERENCES, TK_ATTACH,     TK_BETWEEN,    TK_NOTHING,    TK_GROUPS,     
  TK_GROUP,      TK_CASCADE,    TK_ASC,        TK_DEFERRED,   TK_DEJAVIEW,   
  TK_VIEW,       TK_WHEN,       TK_CASE,       TK_COLLATE,    TK_CREATE,     
  TK_CTIME_KW,   TK_IMMEDIATE,  TK_JOIN,       TK_JOIN_KW,    TK_RELEASE,    
  TK_MATCH,      TK_MODULE,     TK_PLAN,       TK_ANALYZE,    TK_PRAGMA,     
  TK_MATERIALIZED, TK_DISTINCT,   TK_IS,         TK_UPDATE,     TK_VALUES,     
  TK_VIRTUAL,    TK_ALWAYS,     TK_WHERE,      TK_RECURSIVE,  TK_ABORT,      
  TK_AFTER,      TK_RENAME,     TK_AND,        TK_DROP,       TK_PARTITION,  
  TK_AUTOINCR,   TK_TO,         TK_IN,         TK_CAST,       TK_COLUMNKW,   
  TK_COMMIT,     TK_CONFLICT,   TK_CTIME_KW,   TK_CTIME_KW,   TK_CURRENT,    
  TK_PRECEDING,  TK_FAIL,       TK_LAST,       TK_FILTER,     TK_REPLACE,    
  TK_FIRST,      TK_FOLLOWING,  TK_FROM,       TK_JOIN_KW,    TK_LIMIT,      
  TK_FUNCTION,   TK_IF,         TK_INSERT,     TK_ORDER,      TK_RESTRICT,   
  TK_OTHERS,     TK_OVER,       TK_RETURNING,  TK_RETURNS,    TK_JOIN_KW,    
  TK_ROLLBACK,   TK_ROWS,       TK_ROW,        TK_UNBOUNDED,  TK_UNION,      
  TK_USING,      TK_VACUUM,     TK_WINDOW,     TK_DO,         TK_BY,         
  TK_INITIALLY,  TK_ALL,        TK_PRIMARY,    
};
/* Hash table decoded:
**   0: INSERT
**   1: IS
**   2: ROLLBACK TRIGGER
**   3: IMMEDIATE
**   4: PARTITION
**   5: TEMP
**   6:
**   7:
**   8: VALUES WITHOUT
**   9:
**  10: MATCH
**  11: NOTHING
**  12:
**  13: OF INCLUDE
**  14: TIES IGNORE
**  15: PLAN
**  16: INSTEAD INDEXED
**  17:
**  18: TRANSACTION RIGHT
**  19: WHEN
**  20: SET HAVING
**  21: MATERIALIZED IF
**  22: ROWS
**  23: SELECT RETURNS
**  24:
**  25:
**  26: VACUUM SAVEPOINT
**  27:
**  28: LIKE UNION VIRTUAL REFERENCES
**  29: RESTRICT
**  30: MODULE
**  31: THEN REGEXP
**  32: TO
**  33:
**  34: BEFORE
**  35:
**  36:
**  37: FOLLOWING COLLATE CASCADE
**  38: CREATE
**  39:
**  40: CASE REINDEX
**  41: EACH
**  42:
**  43: QUERY
**  44: AND ADD
**  45: PRIMARY ANALYZE
**  46:
**  47: ROW ASC DETACH
**  48: CURRENT_TIME CURRENT_DATE
**  49:
**  50:
**  51: EXCLUSIVE TEMPORARY
**  52:
**  53: DEFERRED
**  54: DEFERRABLE
**  55:
**  56: DATABASE
**  57:
**  58: DELETE VIEW GENERATED
**  59: ATTACH
**  60: END
**  61: EXCLUDE
**  62: ESCAPE DESC
**  63: GLOB
**  64: WINDOW ELSE
**  65: COLUMN
**  66: FIRST
**  67:
**  68: GROUPS ALL
**  69: DISTINCT DROP KEY
**  70: BETWEEN
**  71: INITIALLY
**  72: BEGIN
**  73: FILTER CHECK ACTION
**  74: GROUP INDEX
**  75:
**  76: EXISTS DEFAULT
**  77:
**  78: FOR CURRENT_TIMESTAMP
**  79: EXCEPT
**  80:
**  81: CROSS
**  82:
**  83:
**  84:
**  85: CAST
**  86: FOREIGN AUTOINCREMENT
**  87: COMMIT
**  88: CURRENT AFTER ALTER
**  89: FULL FAIL CONFLICT
**  90: EXPLAIN
**  91: FUNCTION CONSTRAINT
**  92: FROM ALWAYS
**  93:
**  94: ABORT
**  95:
**  96: AS DO
**  97: REPLACE WITH RELEASE
**  98: BY RENAME
**  99: RANGE RAISE
** 100: OTHERS
** 101: USING NULLS
** 102: PRAGMA
** 103: JOIN ISNULL OFFSET
** 104: NOT
** 105: OR LAST LEFT
** 106: LIMIT
** 107:
** 108:
** 109: IN
** 110: INTO
** 111: OVER RECURSIVE
** 112: ORDER OUTER
** 113:
** 114: INTERSECT UNBOUNDED
** 115:
** 116:
** 117: RETURNING ON
** 118:
** 119: WHERE
** 120: NO INNER
** 121: NULL
** 122:
** 123: TABLE
** 124: NATURAL NOTNULL
** 125: PRECEDING MACRO
** 126: UPDATE DEJAVIEW UNIQUE
*/
/* Check to see if z[0..n-1] is a keyword. If it is, write the
** parser symbol code for that keyword into *pType.  Always
** return the integer n (the length of the token). */
static int keywordCode(const char *z, int n, int *pType){
  int i, j;
  const char *zKW;
  assert( n>=2 );
  i = ((charMap(z[0])*4) ^ (charMap(z[n-1])*3) ^ n*1) % 127;
  for(i=(int)aKWHash[i]; i>0; i=aKWNext[i]){
    if( aKWLen[i]!=n ) continue;
    zKW = &zKWText[aKWOffset[i]];
#ifdef SQLITE_ASCII
    if( (z[0]&~0x20)!=zKW[0] ) continue;
    if( (z[1]&~0x20)!=zKW[1] ) continue;
    j = 2;
    while( j<n && (z[j]&~0x20)==zKW[j] ){ j++; }
#endif
#ifdef SQLITE_EBCDIC
    if( toupper(z[0])!=zKW[0] ) continue;
    if( toupper(z[1])!=zKW[1] ) continue;
    j = 2;
    while( j<n && toupper(z[j])==zKW[j] ){ j++; }
#endif
    if( j<n ) continue;
    testcase( i==1 ); /* REINDEX */
    testcase( i==2 ); /* INDEXED */
    testcase( i==3 ); /* INDEX */
    testcase( i==4 ); /* DESC */
    testcase( i==5 ); /* ESCAPE */
    testcase( i==6 ); /* EACH */
    testcase( i==7 ); /* CHECK */
    testcase( i==8 ); /* KEY */
    testcase( i==9 ); /* BEFORE */
    testcase( i==10 ); /* FOREIGN */
    testcase( i==11 ); /* FOR */
    testcase( i==12 ); /* IGNORE */
    testcase( i==13 ); /* REGEXP */
    testcase( i==14 ); /* EXPLAIN */
    testcase( i==15 ); /* INCLUDE */
    testcase( i==16 ); /* DEFERRABLE */
    testcase( i==17 ); /* LEFT */
    testcase( i==18 ); /* TABLE */
    testcase( i==19 ); /* ELSE */
    testcase( i==20 ); /* SELECT */
    testcase( i==21 ); /* THEN */
    testcase( i==22 ); /* END */
    testcase( i==23 ); /* DATABASE */
    testcase( i==24 ); /* AS */
    testcase( i==25 ); /* EXCLUDE */
    testcase( i==26 ); /* DELETE */
    testcase( i==27 ); /* TEMPORARY */
    testcase( i==28 ); /* TEMP */
    testcase( i==29 ); /* OR */
    testcase( i==30 ); /* ISNULL */
    testcase( i==31 ); /* NULLS */
    testcase( i==32 ); /* SAVEPOINT */
    testcase( i==33 ); /* INTERSECT */
    testcase( i==34 ); /* TIES */
    testcase( i==35 ); /* NOTNULL */
    testcase( i==36 ); /* NOT */
    testcase( i==37 ); /* NO */
    testcase( i==38 ); /* NULL */
    testcase( i==39 ); /* LIKE */
    testcase( i==40 ); /* EXCEPT */
    testcase( i==41 ); /* TRANSACTION */
    testcase( i==42 ); /* ACTION */
    testcase( i==43 ); /* ON */
    testcase( i==44 ); /* NATURAL */
    testcase( i==45 ); /* ALTER */
    testcase( i==46 ); /* RAISE */
    testcase( i==47 ); /* EXCLUSIVE */
    testcase( i==48 ); /* EXISTS */
    testcase( i==49 ); /* CONSTRAINT */
    testcase( i==50 ); /* INTO */
    testcase( i==51 ); /* OFFSET */
    testcase( i==52 ); /* OF */
    testcase( i==53 ); /* SET */
    testcase( i==54 ); /* TRIGGER */
    testcase( i==55 ); /* RANGE */
    testcase( i==56 ); /* GENERATED */
    testcase( i==57 ); /* DETACH */
    testcase( i==58 ); /* HAVING */
    testcase( i==59 ); /* GLOB */
    testcase( i==60 ); /* BEGIN */
    testcase( i==61 ); /* INSTEAD */
    testcase( i==62 ); /* ADD */
    testcase( i==63 ); /* DEFAULT */
    testcase( i==64 ); /* MACRO */
    testcase( i==65 ); /* CROSS */
    testcase( i==66 ); /* UNIQUE */
    testcase( i==67 ); /* QUERY */
    testcase( i==68 ); /* WITHOUT */
    testcase( i==69 ); /* WITH */
    testcase( i==70 ); /* OUTER */
    testcase( i==71 ); /* REFERENCES */
    testcase( i==72 ); /* ATTACH */
    testcase( i==73 ); /* BETWEEN */
    testcase( i==74 ); /* NOTHING */
    testcase( i==75 ); /* GROUPS */
    testcase( i==76 ); /* GROUP */
    testcase( i==77 ); /* CASCADE */
    testcase( i==78 ); /* ASC */
    testcase( i==79 ); /* DEFERRED */
    testcase( i==80 ); /* DEJAVIEW */
    testcase( i==81 ); /* VIEW */
    testcase( i==82 ); /* WHEN */
    testcase( i==83 ); /* CASE */
    testcase( i==84 ); /* COLLATE */
    testcase( i==85 ); /* CREATE */
    testcase( i==86 ); /* CURRENT_DATE */
    testcase( i==87 ); /* IMMEDIATE */
    testcase( i==88 ); /* JOIN */
    testcase( i==89 ); /* INNER */
    testcase( i==90 ); /* RELEASE */
    testcase( i==91 ); /* MATCH */
    testcase( i==92 ); /* MODULE */
    testcase( i==93 ); /* PLAN */
    testcase( i==94 ); /* ANALYZE */
    testcase( i==95 ); /* PRAGMA */
    testcase( i==96 ); /* MATERIALIZED */
    testcase( i==97 ); /* DISTINCT */
    testcase( i==98 ); /* IS */
    testcase( i==99 ); /* UPDATE */
    testcase( i==100 ); /* VALUES */
    testcase( i==101 ); /* VIRTUAL */
    testcase( i==102 ); /* ALWAYS */
    testcase( i==103 ); /* WHERE */
    testcase( i==104 ); /* RECURSIVE */
    testcase( i==105 ); /* ABORT */
    testcase( i==106 ); /* AFTER */
    testcase( i==107 ); /* RENAME */
    testcase( i==108 ); /* AND */
    testcase( i==109 ); /* DROP */
    testcase( i==110 ); /* PARTITION */
    testcase( i==111 ); /* AUTOINCREMENT */
    testcase( i==112 ); /* TO */
    testcase( i==113 ); /* IN */
    testcase( i==114 ); /* CAST */
    testcase( i==115 ); /* COLUMN */
    testcase( i==116 ); /* COMMIT */
    testcase( i==117 ); /* CONFLICT */
    testcase( i==118 ); /* CURRENT_TIMESTAMP */
    testcase( i==119 ); /* CURRENT_TIME */
    testcase( i==120 ); /* CURRENT */
    testcase( i==121 ); /* PRECEDING */
    testcase( i==122 ); /* FAIL */
    testcase( i==123 ); /* LAST */
    testcase( i==124 ); /* FILTER */
    testcase( i==125 ); /* REPLACE */
    testcase( i==126 ); /* FIRST */
    testcase( i==127 ); /* FOLLOWING */
    testcase( i==128 ); /* FROM */
    testcase( i==129 ); /* FULL */
    testcase( i==130 ); /* LIMIT */
    testcase( i==131 ); /* FUNCTION */
    testcase( i==132 ); /* IF */
    testcase( i==133 ); /* INSERT */
    testcase( i==134 ); /* ORDER */
    testcase( i==135 ); /* RESTRICT */
    testcase( i==136 ); /* OTHERS */
    testcase( i==137 ); /* OVER */
    testcase( i==138 ); /* RETURNING */
    testcase( i==139 ); /* RETURNS */
    testcase( i==140 ); /* RIGHT */
    testcase( i==141 ); /* ROLLBACK */
    testcase( i==142 ); /* ROWS */
    testcase( i==143 ); /* ROW */
    testcase( i==144 ); /* UNBOUNDED */
    testcase( i==145 ); /* UNION */
    testcase( i==146 ); /* USING */
    testcase( i==147 ); /* VACUUM */
    testcase( i==148 ); /* WINDOW */
    testcase( i==149 ); /* DO */
    testcase( i==150 ); /* BY */
    testcase( i==151 ); /* INITIALLY */
    testcase( i==152 ); /* ALL */
    testcase( i==153 ); /* PRIMARY */
    *pType = aKWCode[i];
    break;
  }
  return n;
}
int sqlite3KeywordCode(const unsigned char *z, int n){
  int id = TK_ID;
  if( n>=2 ) keywordCode((char*)z, n, &id);
  return id;
}
